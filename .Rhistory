} else {
# should just be the last row in this
#browser()
index = which.max(below.threshold$vtime)
}
#browser()
metrics <- cbind(rnott, below.threshold[index, "diverge"],
below.threshold[index, "diversity"], below.threshold[index, "vtime"])
colnames(metrics) <- c("rnott", "diverge", "diversity", "time")
return(metrics)
})
return(metrics.all)
}
beginning_threshold_metrics <- function(threshold, N, records.list, rnott) {
metrics.all <- ldply(records.list, .fun = function(x) {
number.individuals <- threshold * N
time.of.max <- time_max_infected(x = x)
below.threshold <- filter(x,vI < number.individuals, vtime < time.of.max)
if (nrow(below.threshold) == 1) {
#browser()
index = below.threshold$vtime + 1
} else {
# should just be the last row in this
#browser()
index = which.max(below.threshold$vtime)
}
#browser()
metrics <- cbind(rnott, below.threshold[index, "diverge"],
below.threshold[index, "diversity"], below.threshold[index, "vtime"])
colnames(metrics) <- c("rnott", "diverge", "diversity", "time")
return(metrics)
})
return(metrics.all)
}
beginning.metrics <- beginning_threshold_metrics(threshold = .05, N = 1000, records.list = time.records, rnott = 1.5)
data.files
combos <- sort(apply(expand.grid(r0_seq, N), 1, paste, collapse = "_", sep = ""))
data.files <- data.frame(cbind(combos, file.list))
data.files
beg.threshold.metrics.master <- adply(.data = data.files, .margins = 1, function(x) {
load(as.character(x$file.list))
rnott = as.numeric(sub("_.*", "", x$combos))
pop.size = as.numeric(sub(".*_", "", x$combos))
threshold.metrics = beginning_threshold_metrics(threshold = .1, pop.size, records.list = time.records, rnott = rnott)
threshold.metrics = cbind(rep(pop.size, nrow(threshold.metrics)), threshold.metrics)
colnames(threshold.metrics)[1] <- "pop.size"
return(threshold.metrics)
})
beginning_threshold_metrics <- function(threshold, N, records.list, rnott) {
metrics.all <- ldply(records.list, .fun = function(x) {
number.individuals <- threshold * N
time.of.max <- time_max_infected(x = x)
below.threshold <- filter(x,vI < number.individuals, vtime < time.of.max)
if (nrow(below.threshold == 0)) {
return()
}
else if (nrow(below.threshold) == 1) {
#browser()
index = below.threshold$vtime + 1
}
else {
# should just be the last row in this
#browser()
index = which.max(below.threshold$vtime)
}
#browser()
metrics <- cbind(rnott, below.threshold[index, "diverge"],
below.threshold[index, "diversity"], below.threshold[index, "vtime"])
colnames(metrics) <- c("rnott", "diverge", "diversity", "time")
return(metrics)
})
return(metrics.all)
}
beg.threshold.metrics.master <- adply(.data = data.files, .margins = 1, function(x) {
load(as.character(x$file.list))
rnott = as.numeric(sub("_.*", "", x$combos))
pop.size = as.numeric(sub(".*_", "", x$combos))
threshold.metrics = beginning_threshold_metrics(threshold = .1, pop.size, records.list = time.records, rnott = rnott)
threshold.metrics = cbind(rep(pop.size, nrow(threshold.metrics)), threshold.metrics)
colnames(threshold.metrics)[1] <- "pop.size"
return(threshold.metrics)
})
beginning_threshold_metrics <- function(threshold, N, records.list, rnott) {
metrics.all <- ldply(records.list, .fun = function(x) {
number.individuals <- threshold * N
time.of.max <- time_max_infected(x = x)
below.threshold <- filter(x,vI < number.individuals, vtime < time.of.max)
if (nrow(below.threshold == 0)) {
index = 0
browser()
}
else if (nrow(below.threshold) == 1) {
browser()
index = below.threshold$vtime + 1
}
else {
# should just be the last row in this
browser()
index = which.max(below.threshold$vtime)
}
#browser()
metrics <- cbind(rnott, below.threshold[index, "diverge"],
below.threshold[index, "diversity"], below.threshold[index, "vtime"])
colnames(metrics) <- c("rnott", "diverge", "diversity", "time")
return(metrics)
})
return(metrics.all)
}
beginning_threshold_metrics <- function(threshold, N, records.list, rnott) {
metrics.all <- ldply(records.list, .fun = function(x) {
number.individuals <- threshold * N
time.of.max <- time_max_infected(x = x)
below.threshold <- filter(x,vI < number.individuals, vtime < time.of.max)
if (nrow(below.threshold == 0)) {
index = 0
browser()
}
else if (nrow(below.threshold) == 1) {
browser()
index = below.threshold$vtime + 1
}
else {
# should just be the last row in this
browser()
index = which.max(below.threshold$vtime)
}
#browser()
metrics <- cbind(rnott, below.threshold[index, "diverge"],
below.threshold[index, "diversity"], below.threshold[index, "vtime"])
colnames(metrics) <- c("rnott", "diverge", "diversity", "time")
return(metrics)
})
return(metrics.all)
}
beg.threshold.metrics.master <- adply(.data = data.files, .margins = 1, function(x) {
load(as.character(x$file.list))
rnott = as.numeric(sub("_.*", "", x$combos))
pop.size = as.numeric(sub(".*_", "", x$combos))
threshold.metrics = beginning_threshold_metrics(threshold = .1, pop.size, records.list = time.records, rnott = rnott)
threshold.metrics = cbind(rep(pop.size, nrow(threshold.metrics)), threshold.metrics)
colnames(threshold.metrics)[1] <- "pop.size"
return(threshold.metrics)
})
View(below.threshold)
beginning_threshold_metrics <- function(threshold, N, records.list, rnott) {
metrics.all <- ldply(records.list, .fun = function(x) {
number.individuals <- threshold * N
time.of.max <- time_max_infected(x = x)
below.threshold <- filter(x,vI < number.individuals, vtime < time.of.max)
browser()
if (nrow(below.threshold == 0)) {
index = 0
browser()
}
else if (nrow(below.threshold) == 1) {
browser()
index = below.threshold$vtime + 1
}
else {
# should just be the last row in this
browser()
index = which.max(below.threshold$vtime)
}
#browser()
metrics <- cbind(rnott, below.threshold[index, "diverge"],
below.threshold[index, "diversity"], below.threshold[index, "vtime"])
colnames(metrics) <- c("rnott", "diverge", "diversity", "time")
return(metrics)
})
return(metrics.all)
}
beginning_threshold_metrics <- function(threshold, N, records.list, rnott) {
metrics.all <- ldply(records.list, .fun = function(x) {
number.individuals <- threshold * N
time.of.max <- time_max_infected(x = x)
below.threshold <- filter(x,vI < number.individuals, vtime < time.of.max)
browser()
if (nrow(below.threshold == 0)) {
index = 0
browser()
}
else if (nrow(below.threshold) == 1) {
browser()
index = below.threshold$vtime + 1
}
else {
# should just be the last row in this
browser()
index = which.max(below.threshold$vtime)
}
#browser()
metrics <- cbind(rnott, below.threshold[index, "diverge"],
below.threshold[index, "diversity"], below.threshold[index, "vtime"])
colnames(metrics) <- c("rnott", "diverge", "diversity", "time")
return(metrics)
})
return(metrics.all)
}
beg.threshold.metrics.master <- adply(.data = data.files, .margins = 1, function(x) {
load(as.character(x$file.list))
rnott = as.numeric(sub("_.*", "", x$combos))
pop.size = as.numeric(sub(".*_", "", x$combos))
threshold.metrics = beginning_threshold_metrics(threshold = .1, pop.size, records.list = time.records, rnott = rnott)
threshold.metrics = cbind(rep(pop.size, nrow(threshold.metrics)), threshold.metrics)
colnames(threshold.metrics)[1] <- "pop.size"
return(threshold.metrics)
})
beginning_threshold_metrics <- function(threshold, N, records.list, rnott) {
metrics.all <- ldply(records.list, .fun = function(x) {
number.individuals <- threshold * N
time.of.max <- time_max_infected(x = x)
below.threshold <- filter(x,vI < number.individuals, vtime < time.of.max)
browser()
if (nrow(below.threshold) == 0) {
index = 0
browser()
}
else if (nrow(below.threshold) == 1) {
browser()
index = below.threshold$vtime + 1
}
else {
# should just be the last row in this
browser()
index = which.max(below.threshold$vtime)
}
#browser()
metrics <- cbind(rnott, below.threshold[index, "diverge"],
below.threshold[index, "diversity"], below.threshold[index, "vtime"])
colnames(metrics) <- c("rnott", "diverge", "diversity", "time")
return(metrics)
})
return(metrics.all)
}
beg.threshold.metrics.master <- adply(.data = data.files, .margins = 1, function(x) {
load(as.character(x$file.list))
rnott = as.numeric(sub("_.*", "", x$combos))
pop.size = as.numeric(sub(".*_", "", x$combos))
threshold.metrics = beginning_threshold_metrics(threshold = .1, pop.size, records.list = time.records, rnott = rnott)
threshold.metrics = cbind(rep(pop.size, nrow(threshold.metrics)), threshold.metrics)
colnames(threshold.metrics)[1] <- "pop.size"
return(threshold.metrics)
})
beginning_threshold_metrics <- function(threshold, N, records.list, rnott) {
metrics.all <- ldply(records.list, .fun = function(x) {
number.individuals <- threshold * N
time.of.max <- time_max_infected(x = x)
below.threshold <- filter(x,vI < number.individuals, vtime < time.of.max)
browser()
if (nrow(below.threshold) == 0) {
index = 0
return()
}
else if (nrow(below.threshold) == 1) {
browser()
index = below.threshold$vtime + 1
}
else {
# should just be the last row in this
browser()
index = which.max(below.threshold$vtime)
}
#browser()
metrics <- cbind(rnott, below.threshold[index, "diverge"],
below.threshold[index, "diversity"], below.threshold[index, "vtime"])
colnames(metrics) <- c("rnott", "diverge", "diversity", "time")
return(metrics)
})
return(metrics.all)
}
beg.threshold.metrics.master <- adply(.data = data.files, .margins = 1, function(x) {
load(as.character(x$file.list))
rnott = as.numeric(sub("_.*", "", x$combos))
pop.size = as.numeric(sub(".*_", "", x$combos))
threshold.metrics = beginning_threshold_metrics(threshold = .1, pop.size, records.list = time.records, rnott = rnott)
threshold.metrics = cbind(rep(pop.size, nrow(threshold.metrics)), threshold.metrics)
colnames(threshold.metrics)[1] <- "pop.size"
return(threshold.metrics)
})
beginning_threshold_metrics <- function(threshold, N, records.list, rnott) {
metrics.all <- ldply(records.list, .fun = function(x) {
number.individuals <- threshold * N
time.of.max <- time_max_infected(x = x)
below.threshold <- filter(x,vI < number.individuals, vtime < time.of.max)
#browser()
if (nrow(below.threshold) == 0) {
index = 0
return()
}
else if (nrow(below.threshold) == 1) {
# browser()
index = below.threshold$vtime + 1
}
else {
# should just be the last row in this
#browser()
index = which.max(below.threshold$vtime)
}
#browser()
metrics <- cbind(rnott, below.threshold[index, "diverge"],
below.threshold[index, "diversity"], below.threshold[index, "vtime"])
colnames(metrics) <- c("rnott", "diverge", "diversity", "time")
return(metrics)
})
return(metrics.all)
}
beg.threshold.metrics.master <- adply(.data = data.files, .margins = 1, function(x) {
load(as.character(x$file.list))
rnott = as.numeric(sub("_.*", "", x$combos))
pop.size = as.numeric(sub(".*_", "", x$combos))
threshold.metrics = beginning_threshold_metrics(threshold = .1, pop.size, records.list = time.records, rnott = rnott)
threshold.metrics = cbind(rep(pop.size, nrow(threshold.metrics)), threshold.metrics)
colnames(threshold.metrics)[1] <- "pop.size"
return(threshold.metrics)
})
head(beg.threshold.metrics.master)
beg.threshold.metrics.m <- melt(data = beg.threshold.metrics.master, id.vars = c("rnott", "pop.size"),
measure.vars = c("diverge", "diversity"))
colnames(threshold.metrics.m) <- c("rnott", "pop.size", "type", "value")
colnames(beg.threshold.metrics.m) <- c("rnott", "pop.size", "type", "value")
threshold.plot <-ggplot(beg.threshold.metrics.m, aes(factor(rnott), value)) +
facet_grid(pop.size~type) +
geom_boxplot()+
labs(x = expression("R"[0]), y = "Distance")
threshold.plot
fig_path
save_plot(paste0(fig_path, "beg.threshold.metric.plot.pdf"), threshold.plot, base_height = 8, base_aspect_ratio = 1.2)
time.records[[1]]
x
cumsum(x$num.mutations)
colSums(x$num.mutations)
sum(x$num.mutations)
x = time.records[1]
x = time.records[[1]]
time.cum.mutations <- cbind(x[,"vtime"], x[,"cum.strains"])
time.cum.mutations
combine_mutations <- function(time.records) {
# Takes a list of time records
# subsets to just time and cum strains
# combines into a dataframe
num.mutations.master <- ldply(.data = time.records, function(x) {
time.cum.mutations <- data.frame(cbind(x[,"vtime"], x[,"cum.strains"]))
return(time.cum.mutations)
})
#time.records.all  <- do.call("rbind", time.records.all)
return(num.mutations.master)
}
test.mutations <- combine_mutations(time.records)
library(deSolve)
library(ggplot2)
library(grid)
library(gridExtra)
library(cowplot)
library(reshape2)
library(plyr)
library(dplyr)
if(grepl('meyerslab', Sys.info()['login'])) setwd('~/Documents/projects/viral_evolution/viral_evolution_repo/rcode/')
test.mutations <- combine_mutations(time.records)
head(test.mutations)
combine_mutations <- function(time.records) {
# Takes a list of time records
# subsets to just time and cum strains
# combines into a dataframe
num.mutations.master <- ldply(.data = time.records, function(x) {
time.cum.mutations <- data.frame(cbind(x[,"vtime"], x[,"cum.strains"]))
return(time.cum.mutations)
})
#time.records.all  <- do.call("rbind", time.records.all)
colnames(num.mutations.master) <- c("vtime", "cum.strains")
return(num.mutations.master)
}
test.mutations <- combine_mutations(time.records)
head(test.mutations)
View(test.mutations)
data.files
x
cum.strains.trial = combine_mutations(time.records = time.records)
cum.strains.trial = cbind(rep(pop.size, nrow(cum.strains.trial)), cum.strains.trial)
pop.size = 1000
rnott= 1.5
cum.strains.trial = cbind(rep(pop.size, nrow(cum.strains.trial)), cum.strains.trial)
View(cum.strains.trial)
meta.data = cbind(rnott, pop.size)
meta.data = data.frame(cbind(rnott, pop.size))
View(meta.data)
cum.strains.trial = combine_mutations(time.records = time.records)
cum.strains.trial = cbind(rep(meta.data, nrow(cum.strains.trial)), cum.strains.trial)
View(cum.strains.trial)
remove(cum.strains.trial)
cum.strains.trial = cbind(rep(pop.size, nrow(cum.strains.trial)), cum.strains.trial)
cum.strains.trial = combine_mutations(time.records = time.records)
cum.strains.trial = cbind(rep(pop.size, nrow(cum.strains.trial)), cum.strains.trial)
meta.data = data.frame(cbind(rnott, pop.size))
cum.strains.trial = combine_mutations(time.records = time.records)
cum.strains.trial = cbind(meta.data, cum.strains.trial)
View(cum.strains.trial)
cum.strains.master <- adply(.data = data.files, .margins = 1, function(x) {
load(as.character(x$file.list))
rnott = as.numeric(sub("_.*", "", x$combos))
pop.size = as.numeric(sub(".*_", "", x$combos))
meta.data = data.frame(cbind(rnott, pop.size))
cum.strains.trial = combine_mutations(time.records = time.records)
cum.strains.trial = cbind(meta.data, cum.strains.trial)
return(threshold.metrics)
})
cum.strains.master <- adply(.data = data.files, .margins = 1, function(x) {
load(as.character(x$file.list))
rnott = as.numeric(sub("_.*", "", x$combos))
pop.size = as.numeric(sub(".*_", "", x$combos))
meta.data = data.frame(cbind(rnott, pop.size))
cum.strains.trial = combine_mutations(time.records = time.records)
cum.strains.trial = cbind(meta.data, cum.strains.trial)
return(cum.strains.trial)
})
head(cum.strains.master)
cum.strains.master <- adply(.data = data.files, .margins = 1, id=NULL, function(x) {
load(as.character(x$file.list))
rnott = as.numeric(sub("_.*", "", x$combos))
pop.size = as.numeric(sub(".*_", "", x$combos))
meta.data = data.frame(cbind(rnott, pop.size))
cum.strains.trial = combine_mutations(time.records = time.records)
cum.strains.trial = cbind(meta.data, cum.strains.trial)
return(cum.strains.trial)
})
cum.strains.master <- adply(.data = data.files, .margins = 1, .id=NULL, function(x) {
load(as.character(x$file.list))
rnott = as.numeric(sub("_.*", "", x$combos))
pop.size = as.numeric(sub(".*_", "", x$combos))
meta.data = data.frame(cbind(rnott, pop.size))
cum.strains.trial = combine_mutations(time.records = time.records)
cum.strains.trial = cbind(meta.data, cum.strains.trial)
return(cum.strains.trial)
})
head(cum.strains.master)
cum.strains.master <- adply(.data = data.files, .margins = 1, .id=NULL, .expand = F, function(x) {
load(as.character(x$file.list))
rnott = as.numeric(sub("_.*", "", x$combos))
pop.size = as.numeric(sub(".*_", "", x$combos))
meta.data = data.frame(cbind(rnott, pop.size))
cum.strains.trial = combine_mutations(time.records = time.records)
cum.strains.trial = cbind(meta.data, cum.strains.trial)
return(cum.strains.trial)
})
head(cum.strains.master)
cum.strains.groups <- group_by(cum.strains.master, vtime)
cum.strains.groups <- group_by(cum.strains.master, rnott, pop.size, vtime)
summarise(cum.strains.group, avg.strains = mean(cum.strains))
summarise(cum.strains.groups, avg.strains = mean(cum.strains))
cum.strains.avg <- summarise(cum.strains.groups, avg.strains = mean(cum.strains))
View(cum.strains.avg)
cum.strains.avg <- summarise(cum.strains.groups, avg.strains = mean(cum.strains), sd.strains = sd(cum.strains))
head(cum.strains.avg)
increase.mutations <- ggplot(cum.strains.avg, aes(x = vtime, y = avg.strains)) +
geom_line() + facet_grid(rnott~pop.size)
increase.mutations
increase.mutations <- ggplot(cum.strains.avg, aes(x = vtime, y = avg.strains)) +
geom_line() + facet_grid(pop.size~rnott)
increase.mutations
increase.mutations <- ggplot(cum.strains.avg, aes(x = vtime, y = avg.strains)) +
geom_line(lwd = 1) + geom_ribbon(aes(ymin = (avg.strains -sd.strains), ymax = avg.strains + sd.strains, fill="steelblue2", color="steelblue2") +
facet_grid(pop.size~rnott) +
labs(x = "Time", y = "Number of Cumulative Mutations") +
increase.mutations <- ggplot(cum.strains.avg, aes(x = vtime, y = avg.strains)) +
geom_line(lwd = 1) + geom_ribbon(aes(ymin = (avg.strains -sd.strains), ymax = (avg.strains + sd.strains)),
fill="steelblue2", color="steelblue2") +
facet_grid(pop.size~rnott) +
labs(x = "Time", y = "Number of Cumulative Mutations")
increase.mutations
increase.mutations <- ggplot(cum.strains.avg, aes(x = vtime, y = avg.strains)) +
geom_ribbon(aes(ymin = (avg.strains -sd.strains), ymax = (avg.strains + sd.strains)),
fill="steelblue2", color="steelblue2") +
geom_line("black", lwd = 1) +
facet_grid(pop.size~rnott) +
labs(x = "Time", y = "Number of Cumulative Mutations")
increase.mutations <- ggplot(cum.strains.avg, aes(x = vtime, y = avg.strains)) +
geom_ribbon(aes(ymin = (avg.strains -sd.strains), ymax = (avg.strains + sd.strains)),
fill="steelblue2", color="steelblue2") +
geom_line(color = "black", lwd = 1) +
facet_grid(pop.size~rnott) +
labs(x = "Time", y = "Number of Cumulative Mutations")
increase.mutations
increase.mutations <- ggplot(cum.strains.avg, aes(x = vtime, y = avg.strains)) +
geom_ribbon(aes(ymin = (avg.strains -sd.strains), ymax = (avg.strains + sd.strains)),
alpha = .5, fill="steelblue2", color="steelblue2") +
geom_line(color = "black", lwd = 1) +
facet_grid(pop.size~rnott) +
labs(x = "Time", y = "Number of Cumulative Mutations")
increase.mutations
fig_path
save_plot(paste0(fig_path, "increase.mutations.plot.pdf"), increase.mutations, base_height = 8, base_aspect_ratio = 1.2)
save_plot(paste0(fig_path, "increase.mutations.plot.pdf"), increase.mutations, base_height = 8, base_aspect_ratio = 1.5)
save_plot(paste0(fig_path, "increase.mutations.plot.pdf"), increase.mutations, base_height = 8, base_aspect_ratio = 1.75)
increase.mutations <- ggplot(cum.strains.avg, aes(x = vtime, y = avg.strains)) +
geom_ribbon(aes(ymin = (avg.strains -sd.strains), ymax = (avg.strains + sd.strains)),
alpha = .5, fill="steelblue2", color="steelblue2") +
geom_line(color = "black", lwd = 1) +
facet_grid(pop.size~rnott) +
theme(panel.margin = unit(2, "lines")) +
labs(x = "Time", y = "Number of Cumulative Mutations")
save_plot(paste0(fig_path, "increase.mutations.plot.pdf"), increase.mutations, base_height = 8, base_aspect_ratio = 1.75)
increase.mutations <- ggplot(cum.strains.avg, aes(x = vtime, y = avg.strains)) +
geom_ribbon(aes(ymin = (avg.strains -sd.strains), ymax = (avg.strains + sd.strains)),
alpha = .5, fill="steelblue2", color="steelblue2") +
geom_line(color = "black", lwd = 1) +
facet_grid(pop.size~rnott) +
theme(panel.margin = unit(1.5, "lines")) +
labs(x = "Time", y = "Number of Cumulative Mutations")
save_plot(paste0(fig_path, "increase.mutations.plot.pdf"), increase.mutations, base_height = 8, base_aspect_ratio = 1.75)
x
time.records[[1]]
.5*.5
.8*.2
