y=xstart,
times=c(0,times),
parms=params
)
out[-1,3] # return the I variable only
}
sir.model.closed <- function (t, x, params) { #here we begin a function with three arguments
S <- x[1] #create local variable S, the first element of x
I <- x[2] #create local variable I
R <- x[3] #create local variable R
with( #we can simplify code using "with"
as.list(params), #this argument to "with" lets us use the variable names
{ #the system of rate equations
dS <- -beta*S*I
dI <- beta*S*I-gamma*I
dR <- gamma*I
dx <- c(dS,dI,dR) #combine results into a single vector dx
list(dx) #return result as a list
}
)
}
ll <- sapply(beta,f)
plot(beta,-ll,type='l',ylab="-log(L)")
beta.hat <- beta[which.max(ll)]
beta.hat
abline(v=beta.hat,lty=2)
new.model.time %>% filter(iter == 1) %>% select(vtime, vI) ->trial.1
head(trial.1)
1000*.01
params <- c(S.0=1000,I.0=10,gamma=1/3,beta=NA,sigma=1)
head(dat)
loglik <- function (params, data) {
times <- data$biweek/26
pred <- prediction(params,times)
sum(dnorm(x=data$vI,mean=pred,sd=params["sigma"],log=TRUE))
}
beta <- seq(from=.1,to=08., by=0.001)
ll <- sapply(beta,f)
head(dat)
f <- function (beta) {
par <- params
par["beta"] <- beta
loglik(par,dat)
}
ll <- sapply(beta,f)
sir.model.closed <- function (t, x, params) { #here we begin a function with three arguments
S <- x[1] #create local variable S, the first element of x
I <- x[2] #create local variable I
R <- x[3] #create local variable R
with( #we can simplify code using "with"
as.list(params), #this argument to "with" lets us use the variable names
{ #the system of rate equations
dS <- -beta*S*I
dI <- beta*S*I-gamma*I
dR <- gamma*I
dx <- c(dS,dI,dR) #combine results into a single vector dx
list(dx) #return result as a list
}
)
}
prediction <- function (params, times) {
xstart <- params[c("S.0","I.0", "R.0")]
out <- ode(
func=sir.model.closed,
y=xstart,
times=c(0,times),
parms=params
)
out[-1,3] # return the I variable only
}
prediction(params = c(S.0 = 1000, I.0 = 10, gamma = 1/3, beta = .5, sigma = 1)
prediction(params = c(S.0 = 1000, I.0 = 10, gamma = 1/3, beta = .5, sigma = 1)0
prediction(params = c(S.0 = 1000, I.0 = 10, gamma = 1/3, beta = .5, sigma = 1)
prediction(params = c(S.0 = 1000, I.0 = 10, gamma = 1/3, beta = .5, sigma = 1))
loglik <- function (params, data) {
times <- data$vtime/26
pred <- prediction(params,times)
sum(dnorm(x=data$vI,mean=pred,sd=params["sigma"],log=TRUE))
}
time = data$vtime
times = new.model.time$vtime
times
times = trial.1$vtime
times
params <- c(S.0 = 1000, I.0 = 10, gamma = 1/3, beta = .5, sigma = 1)
prediction(params = params, times = times)
times = seq(1:120)
times
prediction(params = params, times = times)
dat <- data.frame(biweek=seq(1:dim(niamey)[1]), measles=niamey[,1])
head(dat)
loglik <- function (params, data) {
browser()
times <- data$biweek/26
pred <- prediction(params,times)
sum(dnorm(x=data$measles,mean=pred,sd=params["sigma"],log=TRUE))
}
dat <- data.frame(biweek=seq(1:dim(niamey)[1]), measles=niamey[,1])
params <- c(S.0=1000,I.0=10,gamma=365/13 ,beta=NA,sigma=1)
f <- function (beta) {
par <- params
par["beta"] <- beta
loglik(par,dat)
}
beta <- seq(from=.1,to=08., by=0.001)
ll <- sapply(beta,f)
beta <- seq(from=0,to=0.02,by=0.0001)
f <- function (beta) {
par <- params
browser()
par["beta"] <- beta
loglik(par,dat)
}
ll <- sapply(beta,f)
prediction <- function (params, times) {
browser()
xstart <- params[c("S.0","I.0", "R.0")]
out <- ode(
browser()
func=sir.model.closed,
y=xstart,
times=c(0,times),
parms=params
)
out[-1,3] # return the I variable only
}
prediction <- function (params, times) {
browser()
xstart <- params[c("S.0","I.0", "R.0")]
out <- ode(
browser()
func=sir.model.closed,
y=xstart,
times=c(0,times),
parms=params
)
out[-1,3] # return the I variable only
}
prediction <- function (params, times) {
browser()
xstart <- params[c("S.0","I.0", "R.0")]
out <- ode(
browser()
func=sir.model.closed,
y=xstart,
times=c(0,times),
parms=params
)
out[-1,3] # return the I variable only
}
prediction <- function (params, times) {
xstart <- params[c("S.0","I.0", "R.0")]
out <- ode(
func=sir.model.closed,
y=xstart,
times=c(0,times),
parms=params
)
out[-1,3] # return the I variable only
}
prediction <- function (params, times) {
xstart <- params[c("S.0","I.0", "R.0")]
browser()
out <- ode(
func=sir.model.closed,
y=xstart,
times=c(0,times),
parms=params
)
browser()
out[-1,3] # return the I variable only
}
ll <- sapply(beta,f)
out
trial.1
head(dat)
tail(dat)
60/26
prediction <- function (params, times) {
xstart <- params[c("S.0","I.0", "R.0")]
browser()
out <- ode(
func=sir.model.closed,
y=xstart,
times=c(0,times),
parms=params
)
browser()
out[-1,3] # return the I variable only
}
seq(1:(nrow(data)+1))
seq(1:(nrow(data)+1))
(nrow(data)+1)
data = trial.1
seq(1:(nrow(data)+1))
length(seq(1:(nrow(data)+1)))
times <- seq(1:(nrow(data)))/65
pred <- prediction(params,times)
loglik <- function (params, data) {
browser()
#times <- data$biweek/26
times <- seq(1:(nrow(data)))/65
pred <- prediction(params,times)
sum(dnorm(x=data$vI,mean=pred,sd=params["sigma"],log=TRUE))
}
new.model.time %>% filter(iter == 1) %>% select(vtime, vI) -> trial.1
times <- seq(1:(nrow(data))
loglik <- function (params, data) {
browser()
#times <- data$biweek/26
times <- seq(1:(nrow(data))
pred <- prediction(params,times)
sum(dnorm(x=data$vI,mean=pred,sd=params["sigma"],log=TRUE))
}
loglik <- function (params, data) {
browser()
#times <- data$biweek/26
times <- seq(1:nrow(data))
pred <- prediction(params,times)
sum(dnorm(x=data$vI,mean=pred,sd=params["sigma"],log=TRUE))
}
new.model.time %>% filter(iter == 1) %>% select(vtime, vI) -> trial.1
params <- c(S.0 = 1000, I.0 = 10, gamma = 1/3, beta = .5, sigma = 1)
f <- function (beta) {
par <- params
browser()
par["beta"] <- beta
loglik(par,dat)
}
beta <- seq(from=.1, to=.8, by=0.001)
ll <- sapply(beta,f)
out
params
prediction(params = params, times = seq(1:60))
out
SIRfunc=function(t, x, vparameters){
S = x[1]
I = x[2]
R = x[3]
if (I<0) I=0
with(as.list(vparameters),{
npop = S+I+R
dS = -beta*S*I/npop
dI = +beta*S*I/npop - gamma*I
dR = +gamma*I
out = c(dS,dI,dR)
list(out)
})
}
tbeg  = 0           # begin day
tend  = 120         # end day
gamma = 1/3       # recovery period of influenza in days^{-1}
R0    = 1.5    # R0 of a hypothetical strain of pandemic influenza
beta = R0*gamma     # "reverse engineer" beta from R0 and gamma
vt = seq(tbeg,tend,delta_t)
delta_t = 1
vt = seq(tbeg,tend,delta_t)
vparameters = c(gamma=gamma,beta=beta)
inits = c(S=S_0,I=I_0,R=R_0)
S_0 = 1000
I_0 = 10
R_0 = 0
inits = c(S=S_0,I=I_0,R=R_0)
sirmodel = as.data.frame(lsoda(inits, vt, SIRfunc, vparameters))
sirmodel$I
plot(sirmodel$I)
head(sirmodel)
prediction <- function (params, times, inits) {
sirmodel = as.data.frame(lsoda(inits, vt, SIRfunc, vparameters))
sirmodel[-1, 3]
#xstart <- params[c("S.0","I.0", "R.0")]
#browser()
#out <- ode(
# y=xstart,
#  times=c(0,times),
#  parms=params
#)
browser()
#out[-1,3] # return the I variable only
}
prediction(params = params, times = seq(tbeg, tend, delta_t), inits = inits)
model.predict = prediction(params = params, times = seq(tbeg, tend, delta_t), inits = inits)
model.predict = prediction(params = params, times = seq(tbeg, tend, delta_t), inits = inits)
prediction <- function (params, times, inits) {
sirmodel = as.data.frame(lsoda(inits, vt, SIRfunc, vparameters))
return(sirmodel[-1, 3])
#xstart <- params[c("S.0","I.0", "R.0")]
#browser()
#out <- ode(
# y=xstart,
#  times=c(0,times),
#  parms=params
#)
browser()
#out[-1,3] # return the I variable only
}
model.predict = prediction(params = params, times = seq(tbeg, tend, delta_t), inits = inits)
model.predict
prediction <- function (params, times, inits) {
sirmodel = as.data.frame(lsoda(inits, vt, SIRfunc, vparameters))
return(sirmodel[-1, 3])
#xstart <- params[c("S.0","I.0", "R.0")]
#browser()
#out <- ode(
# y=xstart,
#  times=c(0,times),
#  parms=params
#)
#out[-1,3] # return the I variable only
}
vparameters
prediction <- function (params, times) {
inits = params["S_0", "I_0", "R_0"]
vparameters = params["gamma", "beta"]
vt = times
sirmodel = as.data.frame(lsoda(inits, vt, SIRfunc, vparameters))
return(sirmodel[-1, 3])
#xstart <- params[c("S.0","I.0", "R.0")]
#browser()
#out <- ode(
# y=xstart,
#  times=c(0,times),
#  parms=params
#)
#out[-1,3] # return the I variable only
}
params
params <- c(S_0 = 1000, I_0 = 10, gamma = 1/3, beta = .5, sigma = 1)
model.predict = prediction(params = params, times = seq(tbeg, tend, delta_t))
prediction <- function (params, times) {
inits = params[c("S_0", "I_0", "R_0")]
vparameters = params[c("gamma", "beta")]
vt = times
sirmodel = as.data.frame(lsoda(inits, vt, SIRfunc, vparameters))
return(sirmodel[-1, 3])
#xstart <- params[c("S.0","I.0", "R.0")]
#browser()
#out <- ode(
# y=xstart,
#  times=c(0,times),
#  parms=params
#)
#out[-1,3] # return the I variable only
}
model.predict = prediction(params = params, times = seq(tbeg, tend, delta_t))
tbeg
tend
prediction <- function (params, times) {
inits = params[c("S_0", "I_0", "R_0")]
vparameters = params[c("gamma", "beta")]
vt = times
browser()
sirmodel = as.data.frame(lsoda(inits, vt, SIRfunc, vparameters))
return(sirmodel[-1, 3])
#xstart <- params[c("S.0","I.0", "R.0")]
#browser()
#out <- ode(
# y=xstart,
#  times=c(0,times),
#  parms=params
#)
#out[-1,3] # return the I variable only
}
model.predict = prediction(params = params, times = seq(tbeg, tend, delta_t))
prediction <- function (inits, times, vparameters) {
sirmodel = as.data.frame(lsoda(inits, vt, SIRfunc, vparameters))
return(sirmodel[-1, 3])
#xstart <- params[c("S.0","I.0", "R.0")]
#browser()
#out <- ode(
# y=xstart,
#  times=c(0,times),
#  parms=params
#)
#out[-1,3] # return the I variable only
}
model.predict = prediction(inits = c(params["S_0", "I_0"]), times = seq(tbeg, tend, delta_t), vparameters = c(params["gamma", "beta"]))
params <- c(S_0 = 1000, I_0 = 10, R_0 = 0, gamma = 1/3, beta = .5, sigma = 1)
model.predict = prediction(inits = c(params["S_0", "I_0", "R_0"]), times = seq(tbeg, tend, delta_t), vparameters = c(params["gamma", "beta"]))
params["S_0", "I_0", "R_0"]
params["S_0", "I_0", "R_0"]
params[c("S_0", "I_0", "R_0")]
vparameters = params[c("gamma", "beta")]
params[c("gamma", "beta")]
model.predict = prediction(inits = params[c("S_0", "I_0", "R_0")], times = seq(tbeg, tend, delta_t),
vparameters = params[c("gamma", "beta")])
model.predict
loglik <- function (params, data) {
browser()
#times <- data$biweek/26
times <- data$vtime
pred <- prediction(params,times)
sum(dnorm(x=data$vI,mean=pred,sd=params["sigma"],log=TRUE))
}
new.model.time %>% filter(iter == 1) %>% select(vtime, vI) -> trial.1
params <- c(S_0 = 1000, I_0 = 10, R_0 = 0, gamma = 1/3, beta = .5, sigma = 1)
f <- function (beta) {
par <- params
browser()
par["beta"] <- beta
loglik(par,dat)
}
beta <- seq(from=.1, to=.8, by=0.001)
ll <- sapply(beta,f)
loglik <- function (params, data) {
browser()
#times <- data$biweek/26
times <- data$vtime
pred <- prediction(inits = params[c("S_0", "I_0", "R_0")],
times = times,
vparameters = params[c("gamma", "beta")])
sum(dnorm(x=data$vI,mean=pred,sd=params["sigma"],log=TRUE))
}
ll <- sapply(beta,f)
loglik <- function (params, data) {
#times <- data$biweek/26
times <- data$vtime
pred <- prediction(inits = params[c("S_0", "I_0", "R_0")],
times = times,
vparameters = params[c("gamma", "beta")])
browser()
sum(dnorm(x=data$vI,mean=pred,sd=params["sigma"],log=TRUE))
}
params <- c(S_0 = 1000, I_0 = 10, R_0 = 0, gamma = 1/3, beta = NA, sigma = 1)
f <- function (beta) {
par <- params
browser()
par["beta"] <- beta
loglik(par,dat)
}
beta <- seq(from=.1, to=.8, by=0.001)
ll <- sapply(beta,f)
f <- function (beta, data) {
par <- params
browser()
par["beta"] <- beta
loglik(par,data)
}
loglik <- function (params, data) {
#times <- data$biweek/26
times <- data$vtime
pred <- prediction(inits = params[c("S_0", "I_0", "R_0")],
times = times,
vparameters = params[c("gamma", "beta")])
browser()
sum(dnorm(x=data$vI,mean=pred,sd=params["sigma"],log=TRUE))
}
remove(data)
remove(dat)
new.model.time %>% filter(iter == 1) %>% select(vtime, vI) -> trial.1
params <- c(S_0 = 1000, I_0 = 10, R_0 = 0, gamma = 1/3, beta = NA, sigma = 1)
f <- function (beta, data) {
par <- params
browser()
par["beta"] <- beta
loglik(par,data)
}
ll <- sapply(beta,f, trial.1)
f <- function (beta, data) {
par <- params
#browser()
par["beta"] <- beta
loglik(par,data)
}
loglik <- function (params, data) {
#times <- data$biweek/26
times <- data$vtime
pred <- prediction(inits = params[c("S_0", "I_0", "R_0")],
times = times,
vparameters = params[c("gamma", "beta")])
# browser()
sum(dnorm(x=data$vI,mean=pred,sd=params["sigma"],log=TRUE))
}
beta <- seq(from=.1, to=.8, by=0.001)
ll <- sapply(beta,f, trial.1)
plot(beta,-ll,type='l',ylab="-log(L)")
beta.hat <- beta[which.max(ll)]
beta.ha
beta.hat
.575/3
.575*3
head(new.model.time)
tail(new.model.time)
iter = seq(1:100)
head(ll)
ll.beta <- daply(new.model.time, .variables = iter, function(x) {
browser()
trial.data = x
browser()
ll <- sapply(beta,f, trial.data)
beta.hat <- beta[which.max(ll)]
return(beta.hat)
})
ll.beta <- daply(new.model.time, .variables = "iter", function(x) {
browser()
trial.data = x
browser()
ll <- sapply(beta,f, trial.data)
beta.hat <- beta[which.max(ll)]
return(beta.hat)
})
beta <- seq(from=.3, to=.8, by=0.01)
iter = seq(1:100)
ll.beta <- daply(new.model.time, .variables = "iter", function(x) {
ll <- sapply(beta,f, x)
beta.hat <- beta[which.max(ll)]
return(beta.hat)
})
ll.beta
summary(ll.beta)
hist(ll.beta)
summary(ll.beta)/gamma
