} #Loop for if it isn't last time step
}
infected <- population.out$I[1:7]
times <- times[1:7]
diversity <- rep(0, length(times))
divergence <- rep(0, length(times))
base_haplotype = rep(1, seq_len)
population <- init_population(times = times, base_haplotype = base_haplotype)
for (i in 1:(length(times)) {
#marking the time step
timestep <- times[i]
#calculate diversity and divergence for the timestep before the mutation and replication event
current.haplotypes <- get_current(population, timestep)
num.current.strains <- length(current.haplotypes$hindex)
diversity[timestep] <- get_diversity(current.haplotypes)
divergence[timestep] <- get_divergence(current.haplotypes, base_haplotype)
if(timestep == length(times)) {
return
}
else {
#get expected number of mutations assuming one sequence per individual
mean.mutation <- mut_rate*seq_len*infected[timestep]
num.mutations <- rpois(1, mean.mutation)
#If there are mutations....
if(num.mutations > 0){
#choose equal number of haplotypes as number of mutations from infected by their frequency in the population
chosen.strains <- as.vector(rmultinom(n = 1, size = num.mutations, prob = current.haplotypes$frequencies))
original.current.strains <- length(chosen.strains) #how many strains are there in the population to mutate
for (j in 1:original.current.strains) { #for each of the original strains in the population
num.current.strains <- length(current.haplotypes$hindex) # how many are there-this will be added to
num.times.specific.strain <- chosen.strains[j] # how many times did we sample this particular strains
#if we sampled this particular strain at least once
if (num.times.specific.strain > 0) {
for (m in 1:num.times.specific.strain) { #for however many times we did
# Mutate the strain
new.strain <- mutate.strain(strain = current.haplotypes$strain[[j]])
#Index the next
num.current.strains <- num.current.strains+1
current.haplotypes$strain[[num.current.strains]] <- new.strain
current.haplotypes$hindex[num.current.strains] <- "temporary" #Good through here
# Calculate and change the frequencies - Messed up here
#calulate.mutated.frequencies(current.haplotypes, infected, og.strain.index, strain.index, timestep)
new.strain.frequency <- 1/infected[timestep]
old.strain.frequency <- (current.haplotypes$frequencies[j]*infected[timestep]-1)/infected[timestep] # new frequency of old strain
current.haplotypes$frequencies[j] <- old.strain.frequency
current.haplotypes$frequencies[num.current.strains] <- new.strain.frequency
print(sum(current.haplotypes$frequencies))
}
}
}
}
#Drift - Replication Part
num.new.infecteds <- ceiling(infected[timestep+1])
new.strains <- rmultinom(n = 1, size = num.new.infecteds, prob = current.haplotypes$frequencies)
#list of new haplotypes
nex.gen.hap <- list(hindex = current.haplotypes$hindex, frequencies = as.vector(new.strains)/num.new.infecteds, strain = current.haplotypes$strain)
print(sum(nex.gen.hap$frequencies))
#check if any have temporary have 0 frequency - i.e. mutated and didn't replicate
for (i in 1:length(nex.gen.hap$hindex)) {
if(length(which(nex.gen.hap$hindex == "temporary")) > 0) {
temporary.strains <- which(nex.gen.hap$hindex == "temporary")
for(j in 1:length(temporary.strains)) {
if (nex.gen.hap$frequencies[temporary.strains[j]] == 0) {
nex.gen.hap$hindex <- nex.gen.hap$hindex[-temporary.strains]
nex.gen.hap$frequencies <-nex.gen.hap$frequencies[-temporary.strains]
nex.gen.hap$strain <- nex.gen.hap$strain[-temporary.strains]
}
}
}
} #End of loop for didn't have any temporary  - Good through here
#update historical record
#update_population <- function(nex.gen.hap, population, timestep) {
new.hindex <- as.character(nex.gen.hap$hindex)
pop.hindex <- as.character(population$hindex)
same.hindex <- which(new.hindex%in%pop.hindex)
different.hindex <- which(!new.hindex%in%pop.hindex) #which new strain indexes aren't in the population
older.strains <- which(!pop.hindex%in%new.hindex) #which hindex were once present but not in current
#For those that are the same, update their frequencies in next time step
for(i in 1:length(same.hindex)) {
population$frequency[timestep+1,same.hindex[i]] <- nex.gen.hap$frequencies[same.hindex[i]]
}
#If temporary, check if strain matches previous that have gone extinct
#Loops through all those strains that weren't in the previous generation
if (length(different.hindex) > 0 ) {
for (m in 1:length(different.hindex)) { #for how many different strains there are
temp_strain <- nex.gen.hap$strain[[different.hindex[m]]]
#Loops through all the strains that have been in the population but weren't in the previous
#If not any, go straight to add new
if (length(older.strains) > 0){
for(k in 1:length(older.strains)) {
ancestor_strain <- population$strain[[older.strains[k]]]
#checks the distance between the two, if its 0 (i.e., same frequency) puts that frequency in the timestep
if(get_distance(temp_strain, ancestor_strain) == 0) {
population$frequency[timestep+1,older.strains[k]] <- nex.gen.hap$frequency[different.hindex[m]]
match = match + 1
}
if(match == 1) return
}
}
#Adding to population
new.strain.hindex <- length(population$hindex)+1
population$hindex[new.strain.hindex] <- new.strain.hindex
population$strain[[new.strain.hindex]] <- temp_strain
new.strain.name <- paste("strain", new.strain.hindex, sep = ".")
population$frequency$new.strain.hindex <- rep(0, length(times))
names(population$frequency)[names(population$frequency) == 'new.strain.hindex'] <- new.strain.name
population$frequency[timestep+1,new.strain.hindex] <- nex.gen.hap$frequencies[different.hindex[m]]
} #Loop if there aren't any strains that were once present, but not in the most recent generation
}
} #Loop for if it isn't last time step
}
for (i in 1:(length(times)) {
#marking the time step
timestep <- times[i]
#calculate diversity and divergence for the timestep before the mutation and replication event
current.haplotypes <- get_current(population, timestep)
num.current.strains <- length(current.haplotypes$hindex)
diversity[timestep] <- get_diversity(current.haplotypes)
divergence[timestep] <- get_divergence(current.haplotypes, base_haplotype)
if(timestep == length(times)) {
return
}
else {
#get expected number of mutations assuming one sequence per individual
mean.mutation <- mut_rate*seq_len*infected[timestep]
num.mutations <- rpois(1, mean.mutation)
#If there are mutations....
if(num.mutations > 0){
#choose equal number of haplotypes as number of mutations from infected by their frequency in the population
chosen.strains <- as.vector(rmultinom(n = 1, size = num.mutations, prob = current.haplotypes$frequencies))
original.current.strains <- length(chosen.strains) #how many strains are there in the population to mutate
for (j in 1:original.current.strains) { #for each of the original strains in the population
num.current.strains <- length(current.haplotypes$hindex) # how many are there-this will be added to
num.times.specific.strain <- chosen.strains[j] # how many times did we sample this particular strains
#if we sampled this particular strain at least once
if (num.times.specific.strain > 0) {
for (m in 1:num.times.specific.strain) { #for however many times we did
# Mutate the strain
new.strain <- mutate.strain(strain = current.haplotypes$strain[[j]])
#Index the next
num.current.strains <- num.current.strains+1
current.haplotypes$strain[[num.current.strains]] <- new.strain
current.haplotypes$hindex[num.current.strains] <- "temporary" #Good through here
# Calculate and change the frequencies - Messed up here
#calulate.mutated.frequencies(current.haplotypes, infected, og.strain.index, strain.index, timestep)
new.strain.frequency <- 1/infected[timestep]
old.strain.frequency <- (current.haplotypes$frequencies[j]*infected[timestep]-1)/infected[timestep] # new frequency of old strain
current.haplotypes$frequencies[j] <- old.strain.frequency
current.haplotypes$frequencies[num.current.strains] <- new.strain.frequency
print(sum(current.haplotypes$frequencies))
}
}
}
}
#Drift - Replication Part
num.new.infecteds <- ceiling(infected[timestep+1])
new.strains <- rmultinom(n = 1, size = num.new.infecteds, prob = current.haplotypes$frequencies)
#list of new haplotypes
nex.gen.hap <- list(hindex = current.haplotypes$hindex, frequencies = as.vector(new.strains)/num.new.infecteds, strain = current.haplotypes$strain)
print(sum(nex.gen.hap$frequencies))
#check if any have temporary have 0 frequency - i.e. mutated and didn't replicate
for (i in 1:length(nex.gen.hap$hindex)) {
if(length(which(nex.gen.hap$hindex == "temporary")) > 0) {
temporary.strains <- which(nex.gen.hap$hindex == "temporary")
for(j in 1:length(temporary.strains)) {
if (nex.gen.hap$frequencies[temporary.strains[j]] == 0) {
nex.gen.hap$hindex <- nex.gen.hap$hindex[-temporary.strains]
nex.gen.hap$frequencies <-nex.gen.hap$frequencies[-temporary.strains]
nex.gen.hap$strain <- nex.gen.hap$strain[-temporary.strains]
}
}
}
} #End of loop for didn't have any temporary  - Good through here
#update historical record
#update_population <- function(nex.gen.hap, population, timestep) {
new.hindex <- as.character(nex.gen.hap$hindex)
pop.hindex <- as.character(population$hindex)
same.hindex <- which(new.hindex%in%pop.hindex)
different.hindex <- which(!new.hindex%in%pop.hindex) #which new strain indexes aren't in the population
older.strains <- which(!pop.hindex%in%new.hindex) #which hindex were once present but not in current
#For those that are the same, update their frequencies in next time step
for(i in 1:length(same.hindex)) {
population$frequency[timestep+1,same.hindex[i]] <- nex.gen.hap$frequencies[same.hindex[i]]
}
#If temporary, check if strain matches previous that have gone extinct
#Loops through all those strains that weren't in the previous generation
if (length(different.hindex) > 0 ) {
for (m in 1:length(different.hindex)) { #for how many different strains there are
temp_strain <- nex.gen.hap$strain[[different.hindex[m]]]
#Loops through all the strains that have been in the population but weren't in the previous
#If not any, go straight to add new
if (length(older.strains) > 0){
for(k in 1:length(older.strains)) {
ancestor_strain <- population$strain[[older.strains[k]]]
#checks the distance between the two, if its 0 (i.e., same frequency) puts that frequency in the timestep
if(get_distance(temp_strain, ancestor_strain) == 0) {
population$frequency[timestep+1,older.strains[k]] <- nex.gen.hap$frequency[different.hindex[m]]
match = match + 1
}
if(match == 1) return
}
}
#Adding to population
new.strain.hindex <- length(population$hindex)+1
population$hindex[new.strain.hindex] <- new.strain.hindex
population$strain[[new.strain.hindex]] <- temp_strain
new.strain.name <- paste("strain", new.strain.hindex, sep = ".")
population$frequency$new.strain.hindex <- rep(0, length(times))
names(population$frequency)[names(population$frequency) == 'new.strain.hindex'] <- new.strain.name
population$frequency[timestep+1,new.strain.hindex] <- nex.gen.hap$frequencies[different.hindex[m]]
} #Loop if there aren't any strains that were once present, but not in the most recent generation
}
} #Loop for if it isn't last time step
}
1:(length(times)-1)
for (i in 1:(length(times)-1) {
#marking the time step
timestep <- times[i]
#calculate diversity and divergence for the timestep before the mutation and replication event
current.haplotypes <- get_current(population, timestep)
num.current.strains <- length(current.haplotypes$hindex)
diversity[timestep] <- get_diversity(current.haplotypes)
divergence[timestep] <- get_divergence(current.haplotypes, base_haplotype)
#get expected number of mutations assuming one sequence per individual
mean.mutation <- mut_rate*seq_len*infected[timestep]
num.mutations <- rpois(1, mean.mutation)
#If there are mutations....
if(num.mutations > 0){
#choose equal number of haplotypes as number of mutations from infected by their frequency in the population
chosen.strains <- as.vector(rmultinom(n = 1, size = num.mutations, prob = current.haplotypes$frequencies))
original.current.strains <- length(chosen.strains) #how many strains are there in the population to mutate
for (j in 1:original.current.strains) { #for each of the original strains in the population
num.current.strains <- length(current.haplotypes$hindex) # how many are there-this will be added to
num.times.specific.strain <- chosen.strains[j] # how many times did we sample this particular strains
#if we sampled this particular strain at least once
if (num.times.specific.strain > 0) {
for (m in 1:num.times.specific.strain) { #for however many times we did
# Mutate the strain
new.strain <- mutate.strain(strain = current.haplotypes$strain[[j]])
#Index the next
num.current.strains <- num.current.strains+1
current.haplotypes$strain[[num.current.strains]] <- new.strain
current.haplotypes$hindex[num.current.strains] <- "temporary" #Good through here
# Calculate and change the frequencies - Messed up here
#calulate.mutated.frequencies(current.haplotypes, infected, og.strain.index, strain.index, timestep)
new.strain.frequency <- 1/infected[timestep]
old.strain.frequency <- (current.haplotypes$frequencies[j]*infected[timestep]-1)/infected[timestep] # new frequency of old strain
current.haplotypes$frequencies[j] <- old.strain.frequency
current.haplotypes$frequencies[num.current.strains] <- new.strain.frequency
print(sum(current.haplotypes$frequencies))
}
}
}
}
#Drift - Replication Part
num.new.infecteds <- ceiling(infected[timestep+1])
new.strains <- rmultinom(n = 1, size = num.new.infecteds, prob = current.haplotypes$frequencies)
#list of new haplotypes
nex.gen.hap <- list(hindex = current.haplotypes$hindex, frequencies = as.vector(new.strains)/num.new.infecteds, strain = current.haplotypes$strain)
print(sum(nex.gen.hap$frequencies))
#check if any have temporary have 0 frequency - i.e. mutated and didn't replicate
for (i in 1:length(nex.gen.hap$hindex)) {
if(length(which(nex.gen.hap$hindex == "temporary")) > 0) {
temporary.strains <- which(nex.gen.hap$hindex == "temporary")
for(j in 1:length(temporary.strains)) {
if (nex.gen.hap$frequencies[temporary.strains[j]] == 0) {
nex.gen.hap$hindex <- nex.gen.hap$hindex[-temporary.strains]
nex.gen.hap$frequencies <-nex.gen.hap$frequencies[-temporary.strains]
nex.gen.hap$strain <- nex.gen.hap$strain[-temporary.strains]
}
}
}
} #End of loop for didn't have any temporary  - Good through here
#update historical record
#update_population <- function(nex.gen.hap, population, timestep) {
new.hindex <- as.character(nex.gen.hap$hindex)
pop.hindex <- as.character(population$hindex)
same.hindex <- which(new.hindex%in%pop.hindex)
different.hindex <- which(!new.hindex%in%pop.hindex) #which new strain indexes aren't in the population
older.strains <- which(!pop.hindex%in%new.hindex) #which hindex were once present but not in current
#For those that are the same, update their frequencies in next time step
for(i in 1:length(same.hindex)) {
population$frequency[timestep+1,same.hindex[i]] <- nex.gen.hap$frequencies[same.hindex[i]]
}
#If temporary, check if strain matches previous that have gone extinct
#Loops through all those strains that weren't in the previous generation
if (length(different.hindex) > 0 ) {
for (m in 1:length(different.hindex)) { #for how many different strains there are
temp_strain <- nex.gen.hap$strain[[different.hindex[m]]]
#Loops through all the strains that have been in the population but weren't in the previous
#If not any, go straight to add new
if (length(older.strains) > 0){
for(k in 1:length(older.strains)) {
ancestor_strain <- population$strain[[older.strains[k]]]
#checks the distance between the two, if its 0 (i.e., same frequency) puts that frequency in the timestep
if(get_distance(temp_strain, ancestor_strain) == 0) {
population$frequency[timestep+1,older.strains[k]] <- nex.gen.hap$frequency[different.hindex[m]]
match = match + 1
}
if(match == 1) return
}
}
#Adding to population
new.strain.hindex <- length(population$hindex)+1
population$hindex[new.strain.hindex] <- new.strain.hindex
population$strain[[new.strain.hindex]] <- temp_strain
new.strain.name <- paste("strain", new.strain.hindex, sep = ".")
population$frequency$new.strain.hindex <- rep(0, length(times))
names(population$frequency)[names(population$frequency) == 'new.strain.hindex'] <- new.strain.name
population$frequency[timestep+1,new.strain.hindex] <- nex.gen.hap$frequencies[different.hindex[m]]
} #Loop if there aren't any strains that were once present, but not in the most recent generation
}
}
for (i in 1:length(times) {
#marking the time step
timestep <- times[i]
#calculate diversity and divergence for the timestep before the mutation and replication event
current.haplotypes <- get_current(population, timestep)
num.current.strains <- length(current.haplotypes$hindex)
diversity[timestep] <- get_diversity(current.haplotypes)
divergence[timestep] <- get_divergence(current.haplotypes, base_haplotype)
#get expected number of mutations assuming one sequence per individual
mean.mutation <- mut_rate*seq_len*infected[timestep]
num.mutations <- rpois(1, mean.mutation)
#If there are mutations....
if(num.mutations > 0){
#choose equal number of haplotypes as number of mutations from infected by their frequency in the population
chosen.strains <- as.vector(rmultinom(n = 1, size = num.mutations, prob = current.haplotypes$frequencies))
original.current.strains <- length(chosen.strains) #how many strains are there in the population to mutate
for (j in 1:original.current.strains) { #for each of the original strains in the population
num.current.strains <- length(current.haplotypes$hindex) # how many are there-this will be added to
num.times.specific.strain <- chosen.strains[j] # how many times did we sample this particular strains
#if we sampled this particular strain at least once
if (num.times.specific.strain > 0) {
for (m in 1:num.times.specific.strain) { #for however many times we did
# Mutate the strain
new.strain <- mutate.strain(strain = current.haplotypes$strain[[j]])
#Index the next
num.current.strains <- num.current.strains+1
current.haplotypes$strain[[num.current.strains]] <- new.strain
current.haplotypes$hindex[num.current.strains] <- "temporary" #Good through here
# Calculate and change the frequencies - Messed up here
#calulate.mutated.frequencies(current.haplotypes, infected, og.strain.index, strain.index, timestep)
new.strain.frequency <- 1/infected[timestep]
old.strain.frequency <- (current.haplotypes$frequencies[j]*infected[timestep]-1)/infected[timestep] # new frequency of old strain
current.haplotypes$frequencies[j] <- old.strain.frequency
current.haplotypes$frequencies[num.current.strains] <- new.strain.frequency
print(sum(current.haplotypes$frequencies))
}
}
}
}
#Drift - Replication Part
num.new.infecteds <- ceiling(infected[timestep+1])
new.strains <- rmultinom(n = 1, size = num.new.infecteds, prob = current.haplotypes$frequencies)
#list of new haplotypes
nex.gen.hap <- list(hindex = current.haplotypes$hindex, frequencies = as.vector(new.strains)/num.new.infecteds, strain = current.haplotypes$strain)
print(sum(nex.gen.hap$frequencies))
#check if any have temporary have 0 frequency - i.e. mutated and didn't replicate
for (i in 1:length(nex.gen.hap$hindex)) {
if(length(which(nex.gen.hap$hindex == "temporary")) > 0) {
temporary.strains <- which(nex.gen.hap$hindex == "temporary")
for(j in 1:length(temporary.strains)) {
if (nex.gen.hap$frequencies[temporary.strains[j]] == 0) {
nex.gen.hap$hindex <- nex.gen.hap$hindex[-temporary.strains]
nex.gen.hap$frequencies <-nex.gen.hap$frequencies[-temporary.strains]
nex.gen.hap$strain <- nex.gen.hap$strain[-temporary.strains]
}
}
}
} #End of loop for didn't have any temporary  - Good through here
#update historical record
#update_population <- function(nex.gen.hap, population, timestep) {
new.hindex <- as.character(nex.gen.hap$hindex)
pop.hindex <- as.character(population$hindex)
same.hindex <- which(new.hindex%in%pop.hindex)
different.hindex <- which(!new.hindex%in%pop.hindex) #which new strain indexes aren't in the population
older.strains <- which(!pop.hindex%in%new.hindex) #which hindex were once present but not in current
#For those that are the same, update their frequencies in next time step
for(i in 1:length(same.hindex)) {
population$frequency[timestep+1,same.hindex[i]] <- nex.gen.hap$frequencies[same.hindex[i]]
}
#If temporary, check if strain matches previous that have gone extinct
#Loops through all those strains that weren't in the previous generation
if (length(different.hindex) > 0 ) {
for (m in 1:length(different.hindex)) { #for how many different strains there are
temp_strain <- nex.gen.hap$strain[[different.hindex[m]]]
#Loops through all the strains that have been in the population but weren't in the previous
#If not any, go straight to add new
if (length(older.strains) > 0){
for(k in 1:length(older.strains)) {
ancestor_strain <- population$strain[[older.strains[k]]]
#checks the distance between the two, if its 0 (i.e., same frequency) puts that frequency in the timestep
if(get_distance(temp_strain, ancestor_strain) == 0) {
population$frequency[timestep+1,older.strains[k]] <- nex.gen.hap$frequency[different.hindex[m]]
match = match + 1
}
if(match == 1) return
}
}
#Adding to population
new.strain.hindex <- length(population$hindex)+1
population$hindex[new.strain.hindex] <- new.strain.hindex
population$strain[[new.strain.hindex]] <- temp_strain
new.strain.name <- paste("strain", new.strain.hindex, sep = ".")
population$frequency$new.strain.hindex <- rep(0, length(times))
names(population$frequency)[names(population$frequency) == 'new.strain.hindex'] <- new.strain.name
population$frequency[timestep+1,new.strain.hindex] <- nex.gen.hap$frequencies[different.hindex[m]]
} #Loop if there aren't any strains that were once present, but not in the most recent generation
}
}
for (i in 1:length(times) {
#marking the time step
timestep <- times[i]
#calculate diversity and divergence for the timestep before the mutation and replication event
current.haplotypes <- get_current(population, timestep)
num.current.strains <- length(current.haplotypes$hindex)
diversity[timestep] <- get_diversity(current.haplotypes)
divergence[timestep] <- get_divergence(current.haplotypes, base_haplotype)
#get expected number of mutations assuming one sequence per individual
mean.mutation <- mut_rate*seq_len*infected[timestep]
num.mutations <- rpois(1, mean.mutation)
#If there are mutations....
if(num.mutations > 0){
#choose equal number of haplotypes as number of mutations from infected by their frequency in the population
chosen.strains <- as.vector(rmultinom(n = 1, size = num.mutations, prob = current.haplotypes$frequencies))
original.current.strains <- length(chosen.strains) #how many strains are there in the population to mutate
for (j in 1:original.current.strains) { #for each of the original strains in the population
num.current.strains <- length(current.haplotypes$hindex) # how many are there-this will be added to
num.times.specific.strain <- chosen.strains[j] # how many times did we sample this particular strains
#if we sampled this particular strain at least once
if (num.times.specific.strain > 0) {
for (m in 1:num.times.specific.strain) { #for however many times we did
# Mutate the strain
new.strain <- mutate.strain(strain = current.haplotypes$strain[[j]])
#Index the next
num.current.strains <- num.current.strains+1
current.haplotypes$strain[[num.current.strains]] <- new.strain
current.haplotypes$hindex[num.current.strains] <- "temporary" #Good through here
# Calculate and change the frequencies - Messed up here
#calulate.mutated.frequencies(current.haplotypes, infected, og.strain.index, strain.index, timestep)
new.strain.frequency <- 1/infected[timestep]
old.strain.frequency <- (current.haplotypes$frequencies[j]*infected[timestep]-1)/infected[timestep] # new frequency of old strain
current.haplotypes$frequencies[j] <- old.strain.frequency
current.haplotypes$frequencies[num.current.strains] <- new.strain.frequency
print(sum(current.haplotypes$frequencies))
}
}
}
}
#Drift - Replication Part
num.new.infecteds <- ceiling(infected[timestep+1])
new.strains <- rmultinom(n = 1, size = num.new.infecteds, prob = current.haplotypes$frequencies)
#list of new haplotypes
nex.gen.hap <- list(hindex = current.haplotypes$hindex, frequencies = as.vector(new.strains)/num.new.infecteds, strain = current.haplotypes$strain)
print(sum(nex.gen.hap$frequencies))
#check if any have temporary have 0 frequency - i.e. mutated and didn't replicate
for (i in 1:length(nex.gen.hap$hindex)) {
if(length(which(nex.gen.hap$hindex == "temporary")) > 0) {
temporary.strains <- which(nex.gen.hap$hindex == "temporary")
for(j in 1:length(temporary.strains)) {
if (nex.gen.hap$frequencies[temporary.strains[j]] == 0) {
nex.gen.hap$hindex <- nex.gen.hap$hindex[-temporary.strains]
nex.gen.hap$frequencies <-nex.gen.hap$frequencies[-temporary.strains]
nex.gen.hap$strain <- nex.gen.hap$strain[-temporary.strains]
}
}
}
} #End of loop for didn't have any temporary  - Good through here
#update historical record
#update_population <- function(nex.gen.hap, population, timestep) {
new.hindex <- as.character(nex.gen.hap$hindex)
pop.hindex <- as.character(population$hindex)
same.hindex <- which(new.hindex%in%pop.hindex)
different.hindex <- which(!new.hindex%in%pop.hindex) #which new strain indexes aren't in the population
older.strains <- which(!pop.hindex%in%new.hindex) #which hindex were once present but not in current
#For those that are the same, update their frequencies in next time step
for(i in 1:length(same.hindex)) {
population$frequency[timestep+1,same.hindex[i]] <- nex.gen.hap$frequencies[same.hindex[i]]
}
#If temporary, check if strain matches previous that have gone extinct
#Loops through all those strains that weren't in the previous generation
if (length(different.hindex) > 0 ) {
for (m in 1:length(different.hindex)) { #for how many different strains there are
temp_strain <- nex.gen.hap$strain[[different.hindex[m]]]
#Loops through all the strains that have been in the population but weren't in the previous
#If not any, go straight to add new
if (length(older.strains) > 0){
for(k in 1:length(older.strains)) {
ancestor_strain <- population$strain[[older.strains[k]]]
#checks the distance between the two, if its 0 (i.e., same frequency) puts that frequency in the timestep
if(get_distance(temp_strain, ancestor_strain) == 0) {
population$frequency[timestep+1,older.strains[k]] <- nex.gen.hap$frequency[different.hindex[m]]
match = match + 1
}
if(match == 1) return
}
}
#Adding to population
new.strain.hindex <- length(population$hindex)+1
population$hindex[new.strain.hindex] <- new.strain.hindex
population$strain[[new.strain.hindex]] <- temp_strain
new.strain.name <- paste("strain", new.strain.hindex, sep = ".")
population$frequency$new.strain.hindex <- rep(0, length(times))
names(population$frequency)[names(population$frequency) == 'new.strain.hindex'] <- new.strain.name
population$frequency[timestep+1,new.strain.hindex] <- nex.gen.hap$frequencies[different.hindex[m]]
} #Loop if there aren't any strains that were once present, but not in the most recent generation
}
population
8*100 + 24*144
4256/33
25*8
